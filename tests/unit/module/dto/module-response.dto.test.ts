import { ModuleResponseDto } from '@/modules/module/dto/module-response.dto';
import type { IModule } from '@/models/module.model';
import { Types } from 'mongoose';

describe('ModuleResponseDto', () => {
  it('should transform module data correctly', () => {
    const mockModule = {
      _id: new Types.ObjectId('507f1f77bcf86cd799439011'),
      name: 'Test Module',
      code: 'TEST_MODULE',
      description: 'Test Description',
      accessControl: false,
      defaultConfig: [
        {
          fieldName: 'testField',
          fieldType: 'string',
          values: ['value1', 'value2'],
        },
      ],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: ['dep1', 'dep2'],
      permissions: ['perm1', 'perm2'],
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date('2024-01-02'),
      isDeleted: false,
      deletedAt: null,
      $assertPopulated: jest.fn(),
      $clearModifiedPaths: jest.fn(),
      $clone: jest.fn(),
      $getAllSubdocs: jest.fn(),
      $ignore: jest.fn(),
      $inc: jest.fn(),
      $isDefault: jest.fn(),
      $isDeleted: jest.fn(),
      $isEmpty: jest.fn(),
      $isValid: jest.fn(),
      $locals: {},
      $markValid: jest.fn(),
      $model: jest.fn(),
      $op: null,
      $parent: jest.fn(),
      $session: jest.fn(),
      $set: jest.fn(),
      $where: jest.fn(),
      collection: {} as any,
      db: {} as any,
      delete: jest.fn(),
      deleteOne: jest.fn(),
      depopulate: jest.fn(),
      directModifiedPaths: jest.fn(),
      equals: jest.fn(),
      errors: {},
      get: jest.fn(),
      getChanges: jest.fn(),
      increment: jest.fn(),
      init: jest.fn(),
      invalidate: jest.fn(),
      isDirectModified: jest.fn(),
      isDirectSelected: jest.fn(),
      isInit: jest.fn(),
      isModified: jest.fn(),
      isNew: false,
      isSelected: jest.fn(),
      markModified: jest.fn(),
      modifiedPaths: jest.fn(),
      overwrite: jest.fn(),
      populate: jest.fn(),
      populated: jest.fn(),
      remove: jest.fn(),
      replaceOne: jest.fn(),
      save: jest.fn(),
      schema: {} as any,
      set: jest.fn(),
      toJSON: jest.fn(),
      toObject: jest.fn(),
      unmarkModified: jest.fn(),
      update: jest.fn(),
      updateOne: jest.fn(),
      validate: jest.fn(),
      validateSync: jest.fn(),
    } as unknown as IModule;

    const dto = new ModuleResponseDto(mockModule);

    const expected = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Module',
      code: 'TEST_MODULE',
      description: 'Test Description',
      defaultConfig: [
        {
          fieldName: 'testField',
          fieldType: 'string',
          values: ['value1', 'value2'],
        },
      ],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: ['dep1', 'dep2'],
      permissions: ['perm1', 'perm2'],
      createdAt: '2024-01-01T00:00:00.000Z',
      updatedAt: '2024-01-02T00:00:00.000Z',
    };

    expect(JSON.parse(JSON.stringify(dto))).toEqual(expected);
  });

  it('should handle missing optional fields', () => {
    const mockModule = {
      _id: new Types.ObjectId('507f1f77bcf86cd799439011'),
      name: 'Test Module',
      code: 'TEST_MODULE',
      accessControl: false,
      defaultConfig: [],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: [],
      permissions: [],
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date('2024-01-02'),
      isDeleted: false,
      deletedAt: null,
      $assertPopulated: jest.fn(),
      $clearModifiedPaths: jest.fn(),
      $clone: jest.fn(),
      $getAllSubdocs: jest.fn(),
      $ignore: jest.fn(),
      $inc: jest.fn(),
      $isDefault: jest.fn(),
      $isDeleted: jest.fn(),
      $isEmpty: jest.fn(),
      $isValid: jest.fn(),
      $locals: {},
      $markValid: jest.fn(),
      $model: jest.fn(),
      $op: null,
      $parent: jest.fn(),
      $session: jest.fn(),
      $set: jest.fn(),
      $where: jest.fn(),
      collection: {} as any,
      db: {} as any,
      delete: jest.fn(),
      deleteOne: jest.fn(),
      depopulate: jest.fn(),
      directModifiedPaths: jest.fn(),
      equals: jest.fn(),
      errors: {},
      get: jest.fn(),
      getChanges: jest.fn(),
      increment: jest.fn(),
      init: jest.fn(),
      invalidate: jest.fn(),
      isDirectModified: jest.fn(),
      isDirectSelected: jest.fn(),
      isInit: jest.fn(),
      isModified: jest.fn(),
      isNew: false,
      isSelected: jest.fn(),
      markModified: jest.fn(),
      modifiedPaths: jest.fn(),
      overwrite: jest.fn(),
      populate: jest.fn(),
      populated: jest.fn(),
      remove: jest.fn(),
      replaceOne: jest.fn(),
      save: jest.fn(),
      schema: {} as any,
      set: jest.fn(),
      toJSON: jest.fn(),
      toObject: jest.fn(),
      unmarkModified: jest.fn(),
      update: jest.fn(),
      updateOne: jest.fn(),
      validate: jest.fn(),
      validateSync: jest.fn(),
    } as unknown as IModule;

    const dto = new ModuleResponseDto(mockModule);

    const expected = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Module',
      code: 'TEST_MODULE',
      defaultConfig: [],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: [],
      permissions: [],
      createdAt: '2024-01-01T00:00:00.000Z',
      updatedAt: '2024-01-02T00:00:00.000Z',
    };

    expect(JSON.parse(JSON.stringify(dto))).toEqual(expected);
  });

  it('should handle empty arrays', () => {
    const mockModule = {
      _id: new Types.ObjectId('507f1f77bcf86cd799439011'),
      name: 'Test Module',
      code: 'TEST_MODULE',
      accessControl: false,
      defaultConfig: [],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: [],
      permissions: [],
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date('2024-01-02'),
      isDeleted: false,
      deletedAt: null,
      $assertPopulated: jest.fn(),
      $clearModifiedPaths: jest.fn(),
      $clone: jest.fn(),
      $getAllSubdocs: jest.fn(),
      $ignore: jest.fn(),
      $inc: jest.fn(),
      $isDefault: jest.fn(),
      $isDeleted: jest.fn(),
      $isEmpty: jest.fn(),
      $isValid: jest.fn(),
      $locals: {},
      $markValid: jest.fn(),
      $model: jest.fn(),
      $op: null,
      $parent: jest.fn(),
      $session: jest.fn(),
      $set: jest.fn(),
      $where: jest.fn(),
      collection: {} as any,
      db: {} as any,
      delete: jest.fn(),
      deleteOne: jest.fn(),
      depopulate: jest.fn(),
      directModifiedPaths: jest.fn(),
      equals: jest.fn(),
      errors: {},
      get: jest.fn(),
      getChanges: jest.fn(),
      increment: jest.fn(),
      init: jest.fn(),
      invalidate: jest.fn(),
      isDirectModified: jest.fn(),
      isDirectSelected: jest.fn(),
      isInit: jest.fn(),
      isModified: jest.fn(),
      isNew: false,
      isSelected: jest.fn(),
      markModified: jest.fn(),
      modifiedPaths: jest.fn(),
      overwrite: jest.fn(),
      populate: jest.fn(),
      populated: jest.fn(),
      remove: jest.fn(),
      replaceOne: jest.fn(),
      save: jest.fn(),
      schema: {} as any,
      set: jest.fn(),
      toJSON: jest.fn(),
      toObject: jest.fn(),
      unmarkModified: jest.fn(),
      update: jest.fn(),
      updateOne: jest.fn(),
      validate: jest.fn(),
      validateSync: jest.fn(),
    } as unknown as IModule;

    const dto = new ModuleResponseDto(mockModule);

    const expected = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Module',
      code: 'TEST_MODULE',
      defaultConfig: [],
      isActive: true,
      isCore: false,
      version: '1.0.0',
      dependencies: [],
      permissions: [],
      createdAt: '2024-01-01T00:00:00.000Z',
      updatedAt: '2024-01-02T00:00:00.000Z',
    };

    expect(JSON.parse(JSON.stringify(dto))).toEqual(expected);
  });
});
